<% include ../partials/utils.ejs %>

function RenderFeed(cfg) {
  this.selector = cfg.selector;
  this.selectorButton = cfg.selector+"-button";
  this.selectorStatus = cfg.selector+"-status";
  this.templateSelector = this.selector + "-template";
  this.onNoPosts = cfg.onNoPosts;
  this.postImagePref = cfg.postImagePref;
  this.numPostsPerFetch = cfg.numPostsPerFetch;
  this.skipOldPosts = cfg.skipOldPosts;
  this.enforceMasonryOrder = cfg.enforceMasonryOrder;

  if (!cfg.uris || cfg.uris.length == 0)
  {
    if (this.onNoPosts)
      this.onNoPosts();
    return;
  }

  this._mdConverter = new showdown.Converter();
  this._numPostsFetched = 0;

  // keep small history of last seen posts to hide duplicates 
  // (duplicates can come from the feed updating and page seams shifting)
  this._lastSeenPosts = []; 

  this.initFeeds(cfg.uris);
  this.initMasonry();  
  this.initInfiniteScroll();
}

RenderFeed.prototype.initFeeds = function(uris) {
  // uniquify
  uris = [...new Set(uris)];

  // make 'feed' objects to store book-keeping
  this.feeds = [];
  this.uriRoot2FeedIdx = {}; 
  for (var i=0; i < uris.length; i++)
  {
    var feedParams = this.getFeedUriParams(uris[i]);

    this.feeds.push({
      'root': feedParams[0],
      'start_offset': feedParams[1],
      'params': feedParams[2],
      'has_more': true
    });

    this.uriRoot2FeedIdx[feedParams[0]] = i;
  }
}

RenderFeed.prototype.initMasonry = function() {
  this.msnryContainer = $(this.selector).masonry({
    itemSelector: '.grid-item',
    columnWidth: '.grid-sizer',
    percentPosition: true,
    horizontalOrder: (this.enforceMasonryOrder)? true : false
  });

  // get Masonry instance
  this.msnry = this.msnryContainer.data('masonry');
}

RenderFeed.prototype.initInfiniteScroll = function() {
  var fr = this;

  this.infCardIdCounter = 0;
  this.infScrollContainer = this.msnryContainer.infiniteScroll({
    path: function() {
      if (!fr.feedsHaveMore())
        return; // returning nothing disables further loads

      var pageIndex = this.pageIndex - 1; // -1 to make it 0-indexed
      var feedIdx = pageIndex % fr.feeds.length;
      var root = fr.feeds[feedIdx].root;
      var params = fr.feeds[feedIdx].params;
      var offset = fr.feeds[feedIdx].start_offset
        + (parseInt(pageIndex / fr.feeds.length) * fr.numPostsPerFetch);

      return root + "/" + offset + "?n=" + fr.numPostsPerFetch + "&" + params;
    },
    responseType: 'text',
    /*scrollThreshold: 1200,*/
		button: this.selectorButton,
    status: this.selectorStatus,
    outlayer: this.msnry,
    history: false
  });
  this.infscroll = this.infScrollContainer.data('infiniteScroll');

  // https://infinite-scroll.com/extras.html#loading-json
  this.infScrollContainer.on('load.infiniteScroll', function(ev, resp, path) {
    var data = null;
    var feedIdx = 0;

    if (path)
    {
      var rootPath = fr.getFeedUriParams(path)[0];
      feedIdx = fr.uriRoot2FeedIdx[rootPath];
      data = JSON.parse(resp);
      if (data.posts)
        fr._numPostsFetched += data.posts.length;
    }

    if (fr.skipOldPosts && data && data.posts && data.posts.length)
    {
      // check if posts are stale
      var post = data.posts[0];
      var now = new Date();
      var postDate = new Date(post.date);
      var diffTime = now.getTime() - postDate.getTime();
      var oneDay = 24*60*60*1000;
      var diffDays = Math.round(Math.abs(diffTime/oneDay));
      if (diffDays > 30)
        data.posts = [];
    }

    if (!data || !data.posts || !data.posts.length)
    {
      // nothing more for this feed
      fr.feeds[feedIdx].has_more = false;

      if (!fr.feedsHaveMore())
      {
        fr.allFeedsDone();
        return;
      }

      // push dummy post so infscroll thinks there was an update 
      // ... and other feeds can continue
      if (!data)
        data = {};
      if (!data.posts)
        data.posts = [];
      data.posts.push(null);

      // auto-trigger loading the next feed
      $(fr.selectorButton).trigger('click'); 
    }
    else
      $(fr.selectorButton).fadeIn();

    var urlObj = new URL(rootPath);
    var postUrlBase = urlObj.protocol + "//" + urlObj.host;
    if (data.blog_url)
      postUrlBase = data.blog_url;

    var newCards = $();
    for (var i=0; i < data.posts.length; i++)
    {
      var post = data.posts[i];
      var cardId = fr.infCardIdCounter++;

      var newCard = $("<div class='d-none' id='card-" + cardId + "'>"
        + "<img data-iscroll-id='" + cardId + "' src=''></div>");
      if (post)
      {
        // skip if duplicate
        if (fr._lastSeenPosts.indexOf(post.id) != -1)
          continue;
        fr._lastSeenPosts.unshift(post.id);
        if (fr._lastSeenPosts.length > fr.numPostsPerFetch * 5)
          fr._lastSeenPosts.pop();

        newCard = $(fr.templateSelector + " > div").clone();

        var postRenderUrl = postUrlBase + "/render/" 
          + encodeURIComponent(postUrlBase + post.post_url);

        newCard.attr('id', "card-"+cardId);
        newCard.find("img").data('iscroll-id', newCard.attr('id'));
        newCard.find(".card-img-fold-link").attr("href", postRenderUrl);
        var primaryClickUrl = postRenderUrl;
        if (post.urls && post.urls.length && post.urls[0])
          primaryClickUrl = post.urls[0];
        newCard.find(".card-img-top-link").attr("href", primaryClickUrl);
        newCard.find(".card-title-link").attr("href", primaryClickUrl);
        newCard.find(".card-img-top").hide();
        for (var pi=0; pi < fr.postImagePref.length; pi++)
        {
          var imgField = fr.postImagePref[pi];
          if (post[imgField] && post[imgField].length && post[imgField][0])
          {
            newCard.find(".card-img-top")
              .attr('src', post[imgField][0]).show();
            break;
          }
        }
        newCard.find(".card-author-link").attr('href', postUrlBase);
        if (data.avatar_url)
          newCard.find(".card-author-avatar").css('background-image', 
            'url(' + data.avatar_url + ')');
        newCard.find(".card-author-post-link").attr('href', postRenderUrl);
        newCard.find(".card-author").html(
          Utils.prettifyBlessedHostUrlForDisplay(postUrlBase));

        if (post.re_url)
        {
          var reUrlObj = new URL(post.re_url);
          var reblogRenderUrl = reUrlObj.protocol + "//" + reUrlObj.host 
            + "/render/" + encodeURIComponent(post.re_url);
          newCard.find(".card-reblog-author-post-link")
            .attr('href', reblogRenderUrl)
            .prepend("<div class='oi oi-loop' aria-hidden='true'></div>");
          newCard.find(".card-reblog-author").html(
            Utils.prettifyBlessedHostUrlForDisplay(post.re_url));
        }

        newCard.find(".card-title").html(post.title);
        var markdown = fr._mdConverter.makeHtml(post.text);
        newCard.find(".card-text").html(markdown);
        newCard.find(".card-reblog-button").data('reblog-url', 
          postUrlBase + post.post_url);
        newCard.find(".card-post-now-button")
          .data('post-id', post.id).data('card-id', cardId);
      }

      newCard.hide();
      newCards = newCards.add(newCard);
      fr.msnryContainer.append(newCard);
    }

    // setup new cards
    ReblogButton.activate(".card-reblog-button");
    $(".card-post-now-button").click(function(e) {
      e.preventDefault();
      var $button = $(this);
      var postId = $button.data('post-id');
      var cardId = $button.data('card-id');

      $.post('/post/now', { 
        id: postId
      },
      function(data, status, xhr) {
        if (data && "queued" in data && data.queued == false)
        {
          // success
          console.log(data);
          $button.addClass('text-success')
            .attr('title', 'Posted').off('click');
        }
      },
      'json');

      return false;
    });
    Utils.makeEmbedsResponsive([
      ".card-text iframe", ".card-text embed",
      ".card-text object", ".card-text video"
    ]);

    if (fr.enforceMasonryOrder)
      newCards.imagesLoaded().always(function(instance) {
        newCards.each(function() {
          var id = $(this).find("img").data('iscroll-id');
          var $card = $("#"+id);
          $card.show();
          fr.msnryContainer.masonry('appended', $card);
        });
      });
    else
      newCards.imagesLoaded().progress(function(instance, image) {
        var id = $(image.img).data('iscroll-id');
        var $card = $("#"+id);
        $card.show();
        fr.msnryContainer.masonry('appended', $card);
      });
  });

  // load initial page
  this.infScrollContainer.infiniteScroll('loadNextPage');
}

RenderFeed.prototype.syncProtocol = function(uri) {
  var urlObj = new URL(uri);
  return window.location.protocol + "//" + urlObj.host + urlObj.pathname;
}

// get feed's root, index and searchParams
RenderFeed.prototype.getFeedUriParams = function(uri) {
  var root = uri;
  var idx = 0;
  var sparams = "";

  var arr = uri.match(/\?(.+)/);
  if (arr != null) 
  {
    sparams = arr[1];
    uri = uri.split("?")[0];
  }

  var arr = uri.match(/(.+)\/(\d+).*$/);
  if (arr != null)
  {
    root = this.syncProtocol(arr[1]);
    idx = parseInt(arr[2]);
  }

  return [root, idx, sparams];
}

RenderFeed.prototype.feedsHaveMore = function() {
  var hasMore = false;
  for (var fi=0; fi < this.feeds.length; fi++)
    if (this.feeds[fi].has_more)
    {
      hasMore = true;
      break;
    }

  return hasMore;
}

RenderFeed.prototype.allFeedsDone = function() {
  // hide 'more' button
  $(this.selectorButton).hide();
  
  if (this._numPostsFetched == 0 && this.onNoPosts)
    this.onNoPosts();
}
