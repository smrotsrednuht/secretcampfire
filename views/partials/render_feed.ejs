<% include ../partials/utils.ejs %>

function _syncProtocol(uri) {
  var urlObj = new URL(uri);
  return window.location.protocol + "//" + urlObj.host + urlObj.pathname;
}

// get feed's root, index and searchParams
function _getFeedUriParams(uri) {
  var root = uri;
  var idx = 0;
  var sparams = "";

  var arr = uri.match(/\?(.+)/);
  if (arr != null) 
  {
    sparams = arr[1];
    uri = uri.split("?")[0];
  }

  var arr = uri.match(/(.+)\/(\d+).*$/);
  if (arr != null)
  {
    root = _syncProtocol(arr[1]);
    idx = parseInt(arr[2]);
  }

  return [root, idx, sparams];
}

/*************************************************************************/

function FeedMgr(cfg) {
  this.pageSize = cfg.pageSize;
  
  this._feeds = [];
  this._lastPageIdx = -1;
  this._uriRoot2FeedIdx = {};
}
FeedMgr.prototype.add = function(uri) {
  var feedParams = _getFeedUriParams(uri);

  this._uriRoot2FeedIdx[feedParams[0]] = this._feeds.length;

  this._feeds.push({
    'root': feedParams[0],
    'start_offset': feedParams[1],
    'params': feedParams[2],
    'has_more': true
  });
}
FeedMgr.prototype.feedsHaveMore = function() {
  var hasMore = false;
  for (var fi=0; fi < this._feeds.length; fi++)
    if (this._feeds[fi].has_more)
    {
      hasMore = true;
      break;
    }

  return hasMore;
}
FeedMgr.prototype.next = function(pageIndex) {
  var feedIdx = pageIndex % this._feeds.length;
  var root = this._feeds[feedIdx].root;
  var params = this._feeds[feedIdx].params;

  if (pageIndex > this._lastPageIdx) 
  {
    // advance this feed
    if (typeof this._feeds[feedIdx].offset === 'undefined')
      this._feeds[feedIdx].offset = this._feeds[feedIdx].start_offset;
    else
      this._feeds[feedIdx].offset += this.pageSize;

    this._lastPageIdx = pageIndex;
  }
  var offset = this._feeds[feedIdx].offset;

  return Utils.timestampUrl(root + "/" + offset 
    + "?n=" + this.pageSize + "&" + params);
}
FeedMgr.prototype.markDone = function(rootPath) {
  if (!(rootPath in this._uriRoot2FeedIdx))
    return;

  var feedIdx = this._uriRoot2FeedIdx[rootPath];
  this._feeds[feedIdx].has_more = false;
}

/*************************************************************************/

function RenderFeed(cfg) {
  this.selector = cfg.selector;
  this.selectorButton = cfg.selector+"-button";
  this.selectorStatus = cfg.selector+"-status";
  this.templateSelector = this.selector + "-template";
  this.onNoPosts = cfg.onNoPosts;
  this.postImagePref = cfg.postImagePref;
  this.numPostsPerFetch = cfg.numPostsPerFetch;
  this.skipOldPosts = cfg.skipOldPosts;
  this.enforceOrder = cfg.enforceOrder;

  if (!cfg.uris || cfg.uris.length == 0)
  {
    if (this.onNoPosts)
      this.onNoPosts();
    return;
  }

  this._mdConverter = new showdown.Converter();
  this._numPostsFetched = 0;

  // keep small history of last seen posts to hide duplicates 
  // (duplicates can come from the feed updating and page seams shifting)
  this._lastSeenPosts = []; 

  this.initFeeds(cfg.uris);
}

RenderFeed.prototype.initFeeds = function(uris) {
  // uniquify
  uris = [...new Set(uris)];

  this._feedMgr = new FeedMgr({
    pageSize: this.numPostsPerFetch
  });

  var fr = this;
  fr._numFeedsToInit = uris.length;
  for (var i=0; i < uris.length; i++)
    $.ajax({
      origUrl: uris[i],
      url: Utils.timestampUrl(uris[i]),
      type: 'HEAD',
      crossDomain: true,
      complete: function(xhr) {
        fr._numFeedsToInit--;
        
        if (xhr.status != 200                // reject errors
          || this.origUrl.indexOf("http") == -1) // reject relative paths
        {
          console.log("[RenderFeed] skip bad feed: " + this.origUrl);
          return;
        }

        fr._feedMgr.add(this.origUrl);
        fr.startDrawing();
      }
    });
}

RenderFeed.prototype.startDrawing = function() {
  if (this._startedDrawing)
    return;

  this._startedDrawing = true;

  this.initMasonry();
  this.initInfiniteScroll();
}

RenderFeed.prototype.initMasonry = function() {
  this.msnryContainer = $(this.selector).masonry({
    itemSelector: '.grid-item',
    columnWidth: '.grid-sizer',
    percentPosition: true,
    horizontalOrder: (this.enforceOrder)? true : false
  });

  // get Masonry instance
  this.msnry = this.msnryContainer.data('masonry');
}

RenderFeed.prototype.initInfiniteScroll = function() {
  var fr = this;

  this.infCardIdCounter = 0;
  this.infScrollContainer = this.msnryContainer.infiniteScroll({
    path: function() {
      if (!fr.feedsHaveMore())
        return; // returning nothing disables further loads

      var pageIndex = this.pageIndex - 1; // -1 to make it 0-indexed
      return fr._feedMgr.next(pageIndex);
    },
    responseType: 'text',
    scrollThreshold: window.innerHeight * 2,
    button: this.selectorButton,
    status: this.selectorStatus,
    outlayer: this.msnry,
    history: false
  });
  this.infscroll = this.infScrollContainer.data('infiniteScroll');

  // https://infinite-scroll.com/extras.html#loading-json
  this.infScrollContainer.on('load.infiniteScroll', function(ev, resp, path) {
    var data = null;
    var rootPath = "";

    if (path)
    {
      rootPath = _getFeedUriParams(path)[0];
      data = JSON.parse(resp);
      if (data.posts)
        fr._numPostsFetched += data.posts.length;
    }

    if (fr.skipOldPosts && data && data.posts && data.posts.length)
    {
      // check if posts are stale
      var post = data.posts[0];
      var now = new Date();
      var postDate = new Date(post.date);
      var diffTime = now.getTime() - postDate.getTime();
      var oneDay = 24*60*60*1000;
      var diffDays = Math.round(Math.abs(diffTime/oneDay));
      if (diffDays > 30)
        data.posts = [];
    }

    if (!data || !data.posts || !data.posts.length)
    {
      // nothing more for this feed
      fr._feedMgr.markDone(rootPath);

      if (!fr.feedsHaveMore())
      {
        fr.finish();
        return;
      }

      // push dummy post so infscroll thinks there was an update 
      // ... and other feeds can continue
      if (!data)
        data = {};
      if (!data.posts)
        data.posts = [];
      data.posts.push(null);

      // auto-trigger loading the next feed
      $(fr.selectorButton).trigger('click'); 
    }
    else
      $(fr.selectorButton).fadeIn();

    var urlObj = new URL(rootPath);
    var feedUrlBase = urlObj.protocol + "//" + urlObj.host;
    if (data.blog_url)
      feedUrlBase = data.blog_url;
    var feedAvatarUrl = data.avatar_url;

    var newCards = $();
    for (var i=0; i < data.posts.length; i++)
    {
      var post = data.posts[i];
      var newCard = fr.makeNewCardFromJson(feedUrlBase, feedAvatarUrl, post);
      newCard.hide(); // hide until imagesloaded to prevent flickering
      newCards = newCards.add(newCard);
      fr.msnryContainer.append(newCard);
    }

    // setup new cards
    ReblogButton.activate(newCards.find(".card-reblog-button"));
    LikeButton.activate(newCards.find(".card-like-button"));
    $(".card-post-now-button").click(function(e) {
      e.preventDefault();
      var $button = $(this);
      var postId = $button.data('post-id');
      var cardId = $button.data('card-id');

      $.post('/post/now', { 
        id: postId
      },
      function(data, status, xhr) {
        if (data && "queued" in data && data.queued == false)
        {
          // success
          console.log(data);
          $button.addClass('text-success')
            .attr('title', 'Posted').off('click');
        }
      },
      'json');

      return false;
    });
    Utils.makeEmbedsResponsive([
      ".card-text iframe", ".card-text embed",
      ".card-text object", ".card-text video"
    ]);

    if (fr.enforceOrder)
      newCards.imagesLoaded().always(function(instance) {
        newCards.each(function() {
          var id = $(this).find("img").data('iscroll-id');
          var $card = $("#"+id);
          $card.show();
          fr.msnryContainer.masonry('appended', $card);
        });
      });
    else
      newCards.imagesLoaded().progress(function(instance, image) {
        var id = $(image.img).data('iscroll-id');
        var $card = $("#"+id);
        $card.show();
        fr.msnryContainer.masonry('appended', $card);
      });
  });

  // load initial page
  this.infScrollContainer.infiniteScroll('loadNextPage');
}

RenderFeed.prototype.makeNewCardFromJson 
  = function(feedUrlBase, feedAvatarUrl, post) {
  var fr = this;

  var cardId = fr.infCardIdCounter++;

  var nullCard = $("<div class='d-none' id='card-" + cardId + "'>"
      + "<img data-iscroll-id='" + cardId + "' src=''></div>");

  if (!post || !post.post_url)
    return nullCard;

  // skip if duplicate
  if (fr._lastSeenPosts.indexOf(post.id) != -1)
    return nullCard;

  fr._lastSeenPosts.unshift(post.id);
  if (fr._lastSeenPosts.length > fr.numPostsPerFetch * 5)
    fr._lastSeenPosts.pop();

  newCard = $(fr.templateSelector + " > div").clone();

  var postUrlBase = (post.blog_url)? post.blog_url : feedUrlBase;
  var postRenderUrl = postUrlBase + "/render/" 
    + Utils.encodeScampyUriParam(postUrlBase + post.post_url);

  newCard.attr('id', "card-"+cardId);
  newCard.find("img").data('iscroll-id', newCard.attr('id'));
  newCard.find(".card-img-fold-link").attr("href", postRenderUrl);
  var primaryClickUrl = postRenderUrl;
  if (post.urls && post.urls.length && post.urls[0])
    primaryClickUrl = post.urls[0];
  newCard.find(".card-img-top-link").attr("href", primaryClickUrl);
  newCard.find(".card-title-link").attr("href", primaryClickUrl);
  newCard.find(".card-img-top").hide();
  for (var pi=0; pi < fr.postImagePref.length; pi++)
  {
    var imgField = fr.postImagePref[pi];
    if (post[imgField] && post[imgField].length && post[imgField][0])
    {
      newCard.find(".card-img-top")
        .attr('src', post[imgField][0]).show();
      break;
    }
  }
  newCard.find(".card-author-link").attr('href', postUrlBase);
  var postAvatarUrl = (post.avatar_url)? post.avatar_url : feedAvatarUrl;
  if (postAvatarUrl)
    newCard.find(".card-author-avatar").css('background-image', 
      'url(' + postAvatarUrl + ')');
  newCard.find(".card-author-post-link").attr('href', postRenderUrl);
  newCard.find(".card-author").html(
    Utils.prettifyBlessedHostUrlForDisplay(postUrlBase));

  if (post.re_url)
  {
    var reUrlObj = new URL(post.re_url);
    var reblogRenderUrl = reUrlObj.protocol + "//" + reUrlObj.host 
      + "/render/" + Utils.encodeScampyUriParam(post.re_url);
    newCard.find(".card-reblog-author-post-link")
      .attr('href', reblogRenderUrl)
      .prepend("<div class='oi oi-loop' aria-hidden='true'></div>");
    newCard.find(".card-reblog-author").html(
      Utils.prettifyBlessedHostUrlForDisplay(post.re_url));
  }

  newCard.find(".card-title").html(post.title);
  var markdown = fr._mdConverter.makeHtml(post.text);
  newCard.find(".card-text").html(markdown);
  newCard.find(".card-like-button").data('like-url', 
    postUrlBase + post.post_url);
  newCard.find(".card-reblog-button").data('reblog-url', 
    postUrlBase + post.post_url);
  newCard.find(".card-post-now-button")
    .data('post-id', post.id).data('card-id', cardId);

  return newCard;
}

RenderFeed.prototype.feedsHaveMore = function() {
  if (this._numFeedsToInit && this._numFeedsToInit > 0)
    return true;

  if (this._feedMgr.feedsHaveMore())
    return true;

  return false;
}

RenderFeed.prototype.finish = function() {
  // hide 'more' button
  $(this.selectorButton).hide();
  
  if (this._numPostsFetched == 0 && this.onNoPosts)
    this.onNoPosts();
}
