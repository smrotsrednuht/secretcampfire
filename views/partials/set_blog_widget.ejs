<div class="modal fade" tabindex="-1" role="dialog" id="set-blog-modal">
  <div class="modal-dialog" role="document"><div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title">Get your <b><%= SITE_NAME %></b></h5>
      <h5 class="modal-title d-none">Connect your <b><%= SITE_NAME %></b></h5>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div><!--header-->

    <div class="modal-body">
      Please sign in to your <b><%= SITE_NAME %></b> to continue.
      Or click the button below to make a new account.
    </div>
    <div class="modal-footer">
      <a href="<%= MASTER_URL %>" role="button" class="btn btn-info">Get your <b><%= SITE_NAME %></b> here</a> 
    </div>

    <div class="d-none">
      <div class="modal-body"><form id="set-blog-form">
        <div class="form-group">
          <input type="text" class="form-control form-blog-url" 
            value="" placeholder="Enter your <%= SITE_NAME %> blog URL">
          <p class='text-right mt-2'>Don't have a <b><%= SITE_NAME %></b> yet? <a href="<%= MASTER_URL %>">Get yours here</a>!</p>
        </div>
      </form></div><!--body-->
      <div id="set-blog-success-alert" 
        class="alert alert-success collapse" role="alert">Connected!</div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" 
          id="set-blog-save-button">Connect</button>
        <button type="button" class="collapse btn btn-secondary" data-dismiss="modal">Close</button>
      </div><!--footer-->
    </div><!--d-none-->


  </div></div><!--document-->
</div><!--modal-->

<script>
var SetBlogWidget = new function() {
  this._datastoreKey = 'blog_urls';
  this._callAfterBlogSet = null;

  function _trim(str) {
    if (!str)
      return str;

    return str.replace(/^\s+|\s+$/g, '');
  }

  this.init = function (cfg) {
    var sbw = this;
    this.selector = cfg.selector;

    $(this.selector+"-save-button").click(function(e) {
      e.preventDefault();
      sbw.saveForm();
      return false;
    });

    $(this.selector+"-form .form-blog-url").on('keypress', function(e) {
      if (e.which === 13)
      {
        e.preventDefault();
        $(this).attr("disabled", "disabled");
        sbw.saveForm();
        $(this).removeAttr("disabled");
        return false;
      }
    });

    $(this.selector+"-modal").on('shown.bs.modal', function() {
      $(this).find('input:text')[0].focus();
    });
  };

  this.saveForm = function() {
    var val = $(this.selector + "-form .form-blog-url").val();
    val = _trim(val);
    if (!val)
      return false;

    if (val.indexOf("http") == -1)
      val = window.location.protocol + "//" + val;

    $(this.selector+"-modal").modal("hide");
    if (this._callAfterBlogSet)
    {
      var cb = this._callAfterBlogSet;
      this._callAfterBlogSet = null;
      cb(val);
    }

    // update list of all blogs
    var sbw = this;
    SessionDatastore.getData(this._datastoreKey, function(key, urls) {
      if (!urls)
        urls = [];  

      var findIdx = urls.indexOf(val);
      if (findIdx == 0)
        return; // nothing to do, already on top of queue

      if (findIdx != -1)
        urls.splice(findIdx, 1); // delete old entry

      urls.unshift(val); // push to front
      urls = urls.slice(0, 10); // only keep recent N entries
      SessionDatastore.setData(sbw._datastoreKey, urls);
    });
  };

  this.getBlog = function(cb, checkOnly) {
    var sbw = this;

    this.getBlogs(function(urls) { 
      if (urls && urls.length)
      {
        // blog URL already set
        console.log("[SetBlogWidget] active blog: " + urls[0]);
        cb(urls[0]);
        return;
      }

      if (checkOnly)
      {
        cb(null);
        return;
      }

      sbw._callAfterBlogSet = cb;
      $(sbw.selector+"-modal").modal("show");
    });
  };

  this.getBlogs = function(cb) {
    SessionDatastore.getData(this._datastoreKey, function(key, urls) {
      if (urls)
      {
        console.log("[SetBlogWidget] all blogs: ");
        console.log(urls);
      }

      cb(urls);
    });
  };

  this.setBlog = function(url) {
    // programmatically set blog without modal input
    $(this.selector + "-form .form-blog-url").val(url);
    this.saveForm();
  }

  this.delBlog = function(url) {
    // remove blog from list
    var sbw = this;
    SessionDatastore.getData(this._datastoreKey, function(key, urls) {
      if (!urls)
        return;

      var findIdx = urls.indexOf(url);
      if (findIdx == -1)
        return; // nothing to do

      urls.splice(findIdx, 1); // delete entry
      SessionDatastore.setData(sbw._datastoreKey, urls);
    });
  }

  this.open = function() {
    var sbw = this;
    SessionDatastore.getData(sbw._datastoreKey, function(key, urls) {
      var url = '';
      if (urls && urls.length)
        url = urls[0];
      $(sbw.selector+"-form .form-blog-url").val(url);
      $(sbw.selector+"-modal").modal("show");
    });
  };

  this.isOwner = function(cb) {
    if (typeof this._isOwner !== 'undefined')
    {
      cb(this._isOwner);
      return;
    }

    var sbw = this;
    $.getJSON("/is_owner", function(data) {
      sbw._isOwner = data.is_owner;
      cb(sbw._isOwner);
    });
  };
};

SetBlogWidget.init({
  'selector': "#set-blog"
});
</script>
